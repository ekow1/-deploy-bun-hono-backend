name: Deploy Application

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run tests (if any)
      run: bun test || echo "No tests found"

    - name: Deploy to VPS
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
        port: ${{ secrets.VPS_PORT || 22 }}
        request_pty: true
        script: |
          set -e
          
          # If sudo requires a password, cache credentials for this session
          if [ -n "${{ secrets.VPS_SUDO_PASSWORD }}" ]; then
            echo "Caching sudo credentials..."
            echo "${{ secrets.VPS_SUDO_PASSWORD }}" | sudo -S -v
          fi
          
          # Ensure Bun is on PATH for this session
          export PATH="$HOME/.bun/bin:$PATH"
          
          # Check if server is set up
          if [ ! -d "/var/www/bun-hono" ]; then
            echo "❌ Server not set up. Please run the 'Server Setup' workflow first."
            echo "   Go to Actions → Server Setup → Run workflow"
            exit 1
          fi
          
          echo "🚀 Starting application deployment..."
          
          # Navigate to project directory
          cd /var/www/bun-hono
          
          # Ensure SSH user owns repo for git operations
          echo "🔑 Setting ownership to current user for git operations..."
          sudo chown -R $USER:$USER /var/www/bun-hono
          
          # Backup current version
          BACKUP_DIR="$HOME/bun-hono-backups"
          mkdir -p "$BACKUP_DIR"
          echo "📦 Creating backup in $BACKUP_DIR..."
          cp -r . "$BACKUP_DIR/bun-hono-backup-$(date +%Y%m%d-%H%M%S)" || echo "Skipping backup due to permissions"
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git config --global --add safe.directory /var/www/bun-hono || true
          git fetch origin
          git reset --hard origin/main
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          bun install --production
          
          # Create .env file
          echo "🔧 Creating .env file..."
          cat > .env << EOF
          PORT=${{ secrets.PORT || 8080 }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          MONGO_URI=${{ secrets.MONGODB_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          RESEND=${{ secrets.RESEND }}
          SENDER_MAIL=${{ secrets.SENDER_MAIL }}
          EOF
          
          # Validate required secrets
          if [ -z "${{ secrets.MONGODB_URI }}" ]; then
            echo "❌ Missing required secret: MONGODB_URI" && exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "❌ Missing required secret: JWT_SECRET" && exit 1
          fi
          
          # Ensure service user owns the app directory
          echo "🔑 Setting ownership to www-data for service compatibility..."
          sudo chown -R www-data:www-data /var/www/bun-hono
          
          # Redacted env preview
          echo "🧾 Env keys (redacted values):"
          sed 's/=.*/=*** /' .env | sed 's/.*/   &/'
          
          # Run SSL setup script if domain is provided
          if [ ! -z "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "🔒 Running SSL setup script..."
            sudo chmod +x ssl-setup.sh
            sudo -E env SSL_FORCE=1 ./ssl-setup.sh ${{ secrets.DOMAIN_NAME }} ${{ secrets.EMAIL || 'admin@example.com' }}
          fi
          
          # Ensure systemd service exists
          if ! systemctl list-unit-files | grep -q '^bun-hono.service'; then
            echo "⚙️  Installing systemd service bun-hono.service..."
            sudo cp bun-hono.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable bun-hono
          fi
          
          # Restart the application
          echo "🔄 Restarting application..."
          sudo systemctl daemon-reload
          sudo systemctl restart bun-hono

          # Wait for service to start
          sleep 5

          # Check if service is running
          if sudo systemctl is-active --quiet bun-hono; then
            echo "✅ Service is running successfully"
          else
            echo "❌ Service failed to start"
            sudo systemctl status bun-hono | sed -n '1,120p'
            sudo journalctl -u bun-hono -n 100 --no-pager | sed -n '1,200p'
            exit 1
          fi

          # Health check the deployed application on localhost
          echo "🩺 Health check (localhost)..."
          if curl -f http://localhost:${{ secrets.PORT || 8080 }}/health > /dev/null 2>&1 || curl -f http://localhost:${{ secrets.PORT || 8080 }} > /dev/null 2>&1; then
            echo "✅ Local health check passed"
          else
            echo "❌ Local health check failed"
            exit 1
          fi

          # Test the deployed application (public)
          echo "🌐 Testing deployed application..."
          if [ ! -z "${{ secrets.DOMAIN_NAME }}" ]; then
            # Test HTTPS endpoint
            if curl -f https://${{ secrets.DOMAIN_NAME }} > /dev/null 2>&1; then
              echo "✅ HTTPS deployment successful!"
            else
              echo "❌ HTTPS deployment failed - application not responding"
              exit 1
            fi
          else
            # Test HTTP endpoint
            if curl -f http://localhost:${{ secrets.PORT || 8080 }} > /dev/null 2>&1; then
              echo "✅ HTTP deployment successful!"
            else
              echo "❌ HTTP deployment failed - application not responding"
              exit 1
            fi
          fi
          
          # Run comprehensive test if test script exists
          echo "🧪 Running deployment tests..."
          if [ -f "test-deployment.sh" ]; then
            echo "🧪 Running comprehensive deployment test..."
            sudo chmod +x test-deployment.sh
            sudo ./test-deployment.sh
          else
            echo "⚠️  test-deployment.sh not found, skipping comprehensive test"
          fi
          
          echo "🎉 Application deployment completed successfully!" 