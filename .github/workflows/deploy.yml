name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run tests (if any)
      run: bun test || echo "No tests found"

    - name: Deploy to VPS
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }}
        port: ${{ secrets.VPS_PORT || 22 }}
        request_pty: true
        script: |
          set -e
          
          # If sudo requires a password, cache credentials for this session
          if [ -n "${{ secrets.VPS_SUDO_PASSWORD }}" ]; then
            echo "Caching sudo credentials..."
            echo "${{ secrets.VPS_SUDO_PASSWORD }}" | sudo -S -v
          fi
          
          # Ensure Bun is on PATH for this session
          export PATH="$HOME/.bun/bin:$PATH"
          
          # Install bun on the VPS if missing (safety net)
          if ! command -v bun >/dev/null 2>&1; then
            echo "Bun not found. Installing Bun on VPS..."
            sudo apt update -y
            sudo apt install -y unzip curl
            curl -fsSL https://bun.sh/install | bash
            export PATH="$HOME/.bun/bin:$PATH"
            # Optionally symlink bun to a global location
            if [ -x "$HOME/.bun/bin/bun" ]; then
              sudo ln -sf "$HOME/.bun/bin/bun" /usr/local/bin/bun || true
            fi
          fi
          
          echo "🚀 Starting automated deployment..."
          
          # Check if this is first-time setup
          if [ ! -d "/var/www/bun-hono" ]; then
            echo "🆕 First-time setup detected. Running setup scripts..."
            
            # Create application directory
            echo "📁 Creating application directory..."
            sudo mkdir -p /var/www/bun-hono
            sudo chown -R $USER:$USER /var/www/bun-hono
            
            # Clone repository
            echo "📥 Cloning repository..."
            cd /var/www
            sudo git clone https://github.com/${{ github.repository }}.git bun-hono
            sudo chown -R $USER:$USER bun-hono
            cd bun-hono
            
            # Make setup scripts executable and run them
            echo "🔧 Making scripts executable and running deploy-setup.sh..."
            chmod +x *.sh || true
            chmod +x deploy-setup.sh
            ./deploy-setup.sh
            
            echo "✅ First-time setup completed!"
          fi
          
          # Navigate to project directory
          cd /var/www/bun-hono
          
          # Ensure SSH user owns repo for git operations
          echo "🔑 Setting ownership to current user for git operations..."
          sudo chown -R $USER:$USER /var/www/bun-hono
          
          # Backup current version (to home directory to avoid permission issues)
          BACKUP_DIR="$HOME/bun-hono-backups"
          mkdir -p "$BACKUP_DIR"
          echo "📦 Creating backup in $BACKUP_DIR..."
          cp -r . "$BACKUP_DIR/bun-hono-backup-$(date +%Y%m%d-%H%M%S)" || echo "Skipping backup due to permissions"
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git config --global --add safe.directory /var/www/bun-hono || true
          git fetch origin
          git reset --hard origin/main
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          bun install --production
          
          # Create .env file
          echo "🔧 Creating .env file..."
          cat > .env << EOF
          PORT=${{ secrets.PORT || 8080 }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          MONGO_URI=${{ secrets.MONGODB_URI }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          RESEND=${{ secrets.RESEND }}
          SENDER_MAIL=${{ secrets.SENDER_MAIL }}
          EOF
          
          # Validate required secrets
          if [ -z "${{ secrets.MONGODB_URI }}" ]; then
            echo "❌ Missing required secret: MONGODB_URI" && exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "❌ Missing required secret: JWT_SECRET" && exit 1
          fi
          
          # Ensure all scripts are executable (handle permission after ownership changes)
          echo "🔧 Ensuring scripts are executable..."
          sudo chmod +x deploy-setup.sh ssl-setup.sh backup.sh 2>/dev/null || true
          sudo find . -maxdepth 1 -type f -name "*.sh" -exec chmod +x {} \; || true
          
          # Ensure service user owns the app directory
          echo "🔑 Setting ownership to www-data for service compatibility..."
          sudo chown -R www-data:www-data /var/www/bun-hono
          
          # Redacted env preview
          echo "🧾 Env keys (redacted values):"
          sed 's/=.*/=*** /' .env | sed 's/.*/   &/'
          
          # Run SSL setup script if domain is provided
          if [ ! -z "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "🔒 Running SSL setup script..."
            sudo chmod +x ssl-setup.sh
            sudo -E env SSL_FORCE=1 ./ssl-setup.sh ${{ secrets.DOMAIN_NAME }} ${{ secrets.EMAIL || 'admin@example.com' }}
          fi
          
          # Ensure systemd service exists
          if ! systemctl list-unit-files | grep -q '^bun-hono.service'; then
            echo "⚙️  Installing systemd service bun-hono.service..."
            sudo cp bun-hono.service /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl enable bun-hono
          fi
          
          # Test the application
          echo "🧪 Testing application..."
          export $(grep -E '^(PORT|MONGODB_URI|MONGO_URI|JWT_SECRET|RESEND|SENDER_MAIL)=' .env | xargs)
          timeout 30s bun run server.js &
          SERVER_PID=$!
          sleep 5
          
          # Check if server is responding
          if curl -f http://localhost:${{ secrets.PORT || 8080 }} > /dev/null 2>&1; then
            echo "✅ Application test successful"
            kill $SERVER_PID 2>/dev/null || true
          else
            echo "❌ Application test failed"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Restart the application
          echo "🔄 Restarting application..."
          sudo systemctl daemon-reload
          sudo systemctl restart bun-hono
          
          # Wait for service to start
          sleep 5
          
          # Check if service is running
          if sudo systemctl is-active --quiet bun-hono; then
            echo "✅ Service is running successfully"
          else
            echo "❌ Service failed to start"
            sudo systemctl status bun-hono | sed -n '1,120p'
            sudo journalctl -u bun-hono -n 100 --no-pager | sed -n '1,200p'
            exit 1
          fi
          
          # Test the deployed application
          echo "🌐 Testing deployed application..."
          if [ ! -z "${{ secrets.DOMAIN_NAME }}" ]; then
            # Test HTTPS endpoint
            if curl -f https://${{ secrets.DOMAIN_NAME }} > /dev/null 2>&1; then
              echo "✅ HTTPS deployment successful!"
            else
              echo "❌ HTTPS deployment failed - application not responding"
              exit 1
            fi
          else
            # Test HTTP endpoint
            if curl -f http://localhost:${{ secrets.PORT || 8080 }} > /dev/null 2>&1; then
              echo "✅ HTTP deployment successful!"
            else
              echo "❌ HTTP deployment failed - application not responding"
              exit 1
            fi
          fi
          
          echo "🎉 Deployment completed successfully!" 